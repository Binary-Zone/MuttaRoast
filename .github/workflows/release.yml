name: iOS Release

on:
  release:
    types:
      - published

  workflow_dispatch:

env:
  GITHUB_REF_NAME: ${{ github.event.release.tag_name }}

jobs:
  build-ios-app:
    name: Release App
    runs-on: macos-15

    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.VERSION_BUMPER_APPID }}
          private-key: ${{ secrets.VERSION_BUMPER_SECRET }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Setup Node.js with GitHub Packages auth
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://npm.pkg.github.com/

      - name: Cache npm cache directory
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # - name: Install npm dependencies
      #   run: npm ci

      - name: Update version
        run: npm version ${{ env.GITHUB_REF_NAME }} --no-git-tag-version

      - name: Commit version updates
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add package.json package-lock.json
          git commit -m "chore(version): bump app version"

      - name: Create PR for version bump
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.app-token.outputs.token }}
          branch: chore/version-bump-${{env.GITHUB_REF_NAME}}
          base: main
          title: "chore: bump version to ${{ env.GITHUB_REF_NAME }}"
          body: "Automated version bump from GitHub App"
          commit-message: "chore: bump version ${{ env.GITHUB_REF_NAME }}"
      
      - name: Set PR number
        run: echo "PR_NUMBER=${{ steps.pr.outputs.pull-request-number }}" >> $GITHUB_ENV

      - name: Wait for PR checks to pass
        run: |
          PR_NUMBER=${{ steps.pr.outputs.pull-request-number }}
          REPO="${{ github.repository }}"
          TOKEN="${{ steps.app-token.outputs.token }}"

          echo "Waiting for PR #$PR_NUMBER to become mergeable..."

          for i in {1..30}; do
            MERGEABLE=$(curl -s -H "Authorization: Bearer $TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/$REPO/pulls/$PR_NUMBER \
              | jq -r .mergeable_state)

            echo "Current mergeable_state: $MERGEABLE"

            if [ "$MERGEABLE" == "clean" ]; then
              echo "PR is ready to merge!"
              break
            fi

            echo "PR not ready yet. Waiting 10 seconds..."
            sleep 10
          done

          if [ "$MERGEABLE" != "clean" ]; then
            echo "PR did not become mergeable in time."
            exit 1
          fi